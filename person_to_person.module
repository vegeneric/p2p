<?php

include_once('person_to_person.features.inc');

// person_to_person.module Person to Person v1.0 10/04/2010 vegeneric

// Require our rules integration
require_once('person_to_person.rules.inc');

/**
 * Impementation of hook_menu
 */
function person_to_person_menu() {
  $items = array();
  $items['admin/settings/person_to_person'] = array(
    'title' => 'Person To Person Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('person_to_person_settings'),
    'access arguments' => array('administer site configuration'), // Must be changed!
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/flag-host/%/%'] = array(
    'page callback' => 'person_to_person_flag_host',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer site configuration'), // Must be changed!
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*
 * Our custom callback for flagging/unflagging a host on behalf of another user, the guest.
 */
function person_to_person_flag_host($host_nid, $guest_uid) {
  $host_flag = flag_get_flag('potential_host');
  $account = user_load(array('uid' => $guest_uid));
  $flagged = $host_flag->is_flagged($host_nid, $guest_uid) ? 'unflag' : 'flag';
  //dsm($flagged);
  $host_flag->flag($flagged, $host_nid, $account, TRUE);
  drupal_goto(drupal_get_destination());
}

/**
 * Implementation of hook_nodeapi
 */
function person_to_person_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    
    case 'presave':
      // Rules will automatically create experience nodes for us on an offer's completion.
      // Rules will also feed in the guest as the experience node's author.
      // From that uid, find the offer node and fill in guest / host / date values.
      if ($node->type == 'experience') {
        $guest_nid = db_result(db_query("SELECT nid FROM {node} WHERE type = 'guest' AND uid = %d", $node->uid));
        $offer_node = node_load(db_result(db_query("SELECT n.nid FROM {node} n INNER JOIN {content_field_guest} g ON n.vid = g.vid WHERE n.type = 'offer' AND g.field_guest_nid = %d", $guest_nid)));
        $node->field_guest = $offer_node->field_guest;
        $node->field_host = $offer_node->field_host;
        $node->field_visit_dates = $offer_node->field_visit_dates;
        $node->title = str_replace('Offer', 'Experience', $offer_node->title);
      }
      break;
      
    case 'view':
    	// Add our custom flag links to host nodes
      if ($node->type == 'host') {
        if (arg(0) == 'node' && is_numeric(arg(1)) && is_numeric(arg(2))) {
          $node->content['p2p_flag_host'] = array(
            '#value' => _person_to_person_flag_host_link(arg(1), arg(2)),
            '#weight' => 10,
          );
        } elseif (arg(0) == 'person-to-person' && arg(1) == 'hosts' && is_numeric(arg(2))) {
          $node->content['p2p_flag_host'] = array(
            '#value' => _person_to_person_flag_host_link($node->nid, arg(2), TRUE),
            '#weight' => 10,
          );
        }
      }
      break;
  }
}

/*
 * Build a custom flag link with the additional arg of guest's uid
 */
function _person_to_person_flag_host_link($host_nid, $guest_uid, $view = FALSE) {
  $host_flag = flag_get_flag('potential_host');
  $flagged = $host_flag->is_flagged($host_nid, $guest_uid) ? 'unflag' : 'flag';
  //dsm($flagged);
  $query = 'destination='. arg(0) .'/'. arg(1) .'/'. arg(2);
  if ($view) {
    $query .= '/'. arg(3);
  }
  return l($flagged .' as potential host', 'admin/flag-host/'. $host_nid .'/'. $guest_uid, array('query' => $query));
}

/**
 * Impementation of hook_cron
 */
function person_to_person_cron() {
  
  // 1a. Look for guests that need a host
  $guests = _person_to_person_guests_needing_host();
  
  // 1b. Find and flag new potential hosts for guest
  foreach ($guests AS $guest_uid => $guest_nid) {
    $guest_account = user_load(array('uid' => $guest_uid));
    $guest_node = node_load($guest_nid);
    _person_to_person_find_hosts_for_guest($guest_account, $guest_node, TRUE, FALSE);
  }
  
  // 2. Find agreed matches with X days before the begin date, email staff
  
  // 3. Find matches who's trip has just ended, email everyone for feedback
}

/**
 * Implementation of hook_flag, responding when potential host is flagged / unflagged
 * Used to log hosts who have been matched with guests
 * 
 * @param $action - Action being taken - 'flag' or 'unflag'
 * @param $flag - The flag object
 * @param $content_id - The nid of the host node being flagged
 * @param $account - The guest account on who's behalf host is being flagged 
 */
function person_to_person_flag($action, $flag, $content_id, $account) {
  if ($flag->name == 'potential_host') {
    //dsm('custom flag hook called');
    $host_node = node_load($content_id);
    $guest_node = node_load(db_result(db_query("SELECT nid FROM {node} WHERE type = 'guest' AND uid = %d", $account->uid)));
    
    // Build our basic record for writing to the db
    $record = array(
      'guest_uid' => $account->uid,
      'guest_nid' => $guest_node->nid,
      'host_uid' => $host_node->uid,
      'host_nid' => $host_node->nid,
      'timestamp' => time(),
    );

    // Potential host has been flagged, log it.
    if ($action == 'flag') {
      
      // NOTE: This should be switched to BOOLEAN if we're only going to have 'flagged' and 'unflagged'
      $record['status'] = 'flagged';
      
    // Potential host has been unflagged log it.
    } elseif ($flag->name == 'potential_host' && $action == 'unflag') {
      $record['status'] = 'unflagged';
    }
    // Find out if this is an existing record so we can update if necessary
    $exists = db_result(db_query("SELECT phid FROM {person_to_person_potential_hosts} WHERE guest_uid = %d AND guest_nid = %d AND host_uid = %d AND host_nid = %d", $account->uid, $guest_node->nid, $host_node->uid, $host_node->nid));
    //drupal_write_record('person_to_person_potential_hosts', $record, ($exists ? array('phid' => $exists) : NULL));
  }
}

/**
 * Custom form alterations for the offer node form
 * - On creation form, make sure default dates line up with the requested dates of the guest's node.
 * - On creation form, make sure author is set as guest.
 */
function person_to_person_form_offer_node_form_alter(&$form, &$form_state) {

  // Our date fields are cck, so we use after_build to have access.
  $form['#after_build'][] = 'person_to_person_offer_after_build';
  
  // Add custom validation
  $form['#validate'][] = 'person_to_person_offer_validate';
  
  // Reverse validation order so we're called first
  $form['#validate'] = array_reverse($form['#validate']);
}

/**
 * Implementation of hook_form_FORM_ID_alter
 * Custom validation for the offer node form
 */
function person_to_person_offer_validate(&$form, &$form_state) {
  //dsm($form);
  //dsm($form_state);  
  // If existing node, 
  if ($nid = $form['nid']['#value']) {
    
    // Remove erroneous field_host values (nodereference bug?)
    unset($form_state['values']['field_host']['nid']);
    
    global $user;
    // If a guest is editing...
    if (in_array('guest', $user->roles) && !in_array('p2p_admin', $user->roles)) {
    
      // Make sure only one host is selected
      if ($form_state['values']['field_host'][1]['nid']) {
        form_set_error('field_host', 'Only one host should be selected.');
      }
      
    // Admin is editing...
    } elseif (in_array('p2p_admin', $user->roles)) {
      
      // If more than one host is selected, don't allow host confirmation
      if ($form_state['values']['field_host'][1]['nid'] && $form_state['values']['field_confirm_host'][0]['value'] == 1) {
        form_set_error('field_confirm_host', 'You cannot confirm multiple hosts in a single offer.');
      }
      // If guest / host aren't confirmed, don't allow admin confirmation
      if ($form_state['values']['field_confirm_admin'][0]['value'] == 1 && ($form_state['values']['field_confirm_guest'][0]['value'] == 0 || !$form_state['values']['field_confirm_host'][0]['value'] == 0)) {
        form_set_error('field_confirm_admin', 'Admin confirmation cannot be given until after guest and host are confirmed.');
      }
    }
    
  // New offer being made 
  } else {
    
    // If more than one host is selected, don't allow host confirmation
    if ($form_state['values']['field_host'][1]['nid'] && $form_state['values']['field_confirm_host'][0]['value'] == 1) {
      form_set_error('field_confirm_host', 'You cannot confirm multiple hosts in a single offer.');
    }
  }
  
  // Make sure at least one host is being offered
  if (!$form_state['values']['field_host'][0]['nid']) {
    form_set_error('field_host', 'At least one host must be offered.');
  }
  
  // Never allow guest confirmation without guest confirmation
  if ($form_state['values']['field_confirm_guest'][0]['value'] == 1 && $form_state['values']['field_confirm_host'][0]['value'] == 0) {
    form_set_error('field_confirm_host', 'Guest confirmation should come after the host has confirmed availability.');
  }
}

/**
 * Our custom after-build for the offer creation form
 * - Customize default dates of trip based on guest node.
 */
function person_to_person_offer_after_build($form, &$form_state) {

  // Make sure we're looking at the creation form
  if (arg(0) == 'node' && arg(1) == 'add' && is_numeric(arg(3))) {

    // Load the guest node from the URL
    $guest_nid = arg(3);
    $node = node_load($guest_nid);
    
    // Switch island to guest node's
    $isl_vid = variable_get('person_to_person_island_vocab', 0);
    $isl_tids = array();
    foreach ($node->taxonomy AS $term) {
      
      if ($term->vid = $isl_vid) {
        $isl_tids[$term->tid] = $term->tid;
      }
    }
    $form['taxonomy'][$isl_vid]['#value'] = $isl_tids;
    // Format our depart date from the guest node
    $depart_array = explode('T', $node->field_visit_dates[0]['value']);
    $depart_date_array = explode('-', $depart_array[0]);
    $depart = $depart_date_array[1] .'/'. $depart_date_array[2] .'/'. $depart_date_array[0];
    
    // Format our return date from the guest node
    $return_array = explode('T', $node->field_visit_dates[0]['value2']);
    $return_date_array = explode('-', $return_array[0]);
    $return = $return_date_array[1] .'/'. $return_date_array[2] .'/'. $return_date_array[0];
  
    // Feed in new defaults
    $form['field_visit_dates'][0]['value']['date']['#value'] = $depart;
    $form['field_visit_dates'][0]['value2']['date']['#value'] = $return;
    
    // Set node author as the guest in question, to make for less custom rules code.
    $guest_uid = db_result(db_query("SELECT uid FROM {node} WHERE type = 'guest' AND nid = %d", arg(3)));
    $account = user_load(array('uid' => $guest_uid));
    $form['author']['name']['#value'] = $account->name;
    
  } elseif (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    
    // If host is confirmed, we need to disable the checkbox AND the host nodereference field
    if ($form['field_confirm_host']['#default_value'][0]['value'] == 1) {
      
      // Set value and disable confirm host checkbox
      $form['field_confirm_host']['value']['#value'] = array(0 => 1);
      $form['field_confirm_host']['value']['#attributes']['disabled'] = 'disabled';
      $host_nid = $form['field_host']['#value'][0]['nid'];
      $host_node = node_load($host_nid);
      
      // Replace old field with simple value, careful to preserve weight.
      $form['field_host'] = array('#weight' => $form['field_host']['#weight']);
      $form['field_host']['#type'] = 'value';
      $form['field_host']['#value'] = array(0 => array('nid' => $host_nid));
      
      // Add new markup field (imitating markup form nodereference_url.module)
      $form['field_host_markup'] = array(
        '#type' => 'markup',
        '#weight' => $form['field_host']['#weight'],
        '#value' => '<div id="edit-field-host-0-nid-wrapper" class="form-item">
                    <label for="edit-field-host-0-nid">Host: </label>
                    '. $host_node->title .'</div>');
    }
    
    // If guest is editing and host isn't confirmed, disable guest confirmation
    global $user;
    $guest_first_view = FALSE;
    if (!isset($form['field_confirm_host']['#default_value'][0]['value']) && in_array('guest', $user->roles) && !in_array('p2p_admin', $user->roles)) {
      $guest_first_view = TRUE;
    }
    // If guest is confirmed, set value and disable checkbox
    $guest_confirm = $form['field_confirm_guest']['#default_value'][0]['value'];
    if ($guest_confirm) {
      $form['field_confirm_guest']['value']['#value'] = array(0 => 1);
      $form['field_confirm_guest']['value']['#attributes']['disabled'] = 'disabled';
    }
    // If it's the guest's first view, add custom description to host field
    if ($guest_first_view) {
      $form['field_host']['nid']['nid']['#description'] = t('Select the one (1) potential host that you think is the best match. We will determine their confirm their availability and get back to you.');
      $form['field_confirm_guest']['value']['#attributes']['disabled'] = 'disabled';
    }
    
    // If admin is confirmed, set value and disable checkbox
    if ($form['field_confirm_admin']['#default_value'][0]['value'] == 1) {
      //$form['field_confirm_admin']['value']['#value'] = array('value' => 1);
      //$form['field_confirm_admin']['value']['#attributes']['disabled'] = 'disabled';
    }
  }
  //dsm($form);
  return $form;
}

/**
 * Callback for module settings form.
 */
function person_to_person_settings() {
  $form = array();
  $form['person_to_person_max_host_matches'] = array(
    '#title' => t('Maximum # of host matches'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('person_to_person_max_host_matches', 3),
    '#required' => TRUE,
  );
  
  // Build option array of all vocabularies... 
  // taxonomy_get_vocabularies() was timing out for some reason
  $vocabs = array();
  $sql = db_query("SELECT vid, name FROM {vocabulary}");
  while ($data = db_fetch_object($sql)) {
    $vocabs[$data->vid] = $data->name;
  }
  
  $form['person_to_person_interests_vocab'] = array(
    '#title' => t('Taxonomy vocabulary for Interests'),
    '#type' => 'select',
    '#size' => 5,
    '#default_value' => variable_get('person_to_person_interests_vocab', 1),
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#options' => $vocabs
  );
  $form['person_to_person_island_vocab'] = array(
    '#title' => t('Taxonomy vocabulary for Island'),
    '#type' => 'select',
    '#size' => 5,
    '#default_value' => variable_get('person_to_person_island_vocab', 1),
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#options' => $vocabs
  );
  $form['person_to_person_match_found_email'] = array(
    '#type' => 'textarea',
    '#title' => t('New potential mach found email text'),
    '#size' => 10,
    '#default_value' => variable_get('person_to_person_match_found_email', '')
  );
  return system_settings_form($form);
}

/*
 * Helper function to find guests in need of a host
 * 
 * @return - array of guests - array(USER_ID => 'GUEST_NODE_NID') 
 */
function _person_to_person_guests_needing_host() {
  //$sql = db_query("SELECT n.uid, n.nid FROM {node} n INNER JOIN {} ON INNER JOIN {} ON WHERE n.type = 'guest' AND ''")
}

/**
 * Helper function to find (and flag) potential hosts for a particular guest
 * 
 * @param $uid - The user id of the guest
 * @param $node - The guest node object
 * @param $flag
 * 
 * @return - Boolean - As long as one host is found, returns TRUE, otherwise FALSE
 */
function _person_to_person_find_hosts_for_guest($account, $node, $flag = FALSE, $new_node = TRUE) {
  watchdog('p2p', 'finding hosts for guest uid '. $account->uid);
  watchdog('p2p', 'finding hosts for guest nid '. $node->nid);
  // Find matches based on guest's destination and desired activites
  $return = FALSE;
  $matches = array();
  $hosts = array();
  //dsm($account);
  //dsm($node);
  $isl_vid = variable_get('person_to_person_island_vocab', 0);
  watchdog('p2p', 'island vid '. $isl_vid);
  $int_vid = variable_get('person_to_person_interests_vocab', 0);
  watchdog('p2p', 'interests vid '. $int_vid);
  $isl_all_tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d AND name = '%s'", $isl_vid, 'All / Not sure'));
  
  // Build our guest interests and islands arrays
  // $node->taxonomy structure is different for new guest nodes and 
  // updated ones at the point this gets called, so we have to check.
  $ints_guest = array();
  $isls_guest = array();
  //dsm($node);
  if ($new_node) {
    foreach ($node->taxonomy AS $vid => $terms) {
        foreach ($terms AS $tid) {
          if ($vid == $int_vid) {
            $term = taxonomy_get_term($tid);
            watchdog('p2p', 'adding term tid '. $term->tid .' / name '. $term->name .' to guest interests');
            $ints_guest[$term->tid] = $term->name;
          } elseif ($vid = $isl_vid) {
          	$term = taxonomy_get_term($tid);
          	watchdog('p2p', 'isl tid '. $term->tid);
          	$isls_guest[] = $term->tid;
          }
        }
    }
  } else {
    foreach ($node->taxonomy AS $term) {
      if ($term->vid == $int_vid) {
        watchdog('p2p', 'adding term tid '. $term->tid .' / name '. $term->name .' to guest interests');
        $ints_guest[$term->tid] = $term->name;
      } elseif ($term->vid == $isl_vid) {
        watchdog('p2p', 'isl tid '. $term->tid);
        $isls_guest[] = $term->tid;
      }
    }
  }

  //If a particular island was entered by the guest, only find hosts on that island
  if ((!$newnode && !isset($node->taxonomy[$isl_all_tid])) || ($new_node && !isset($node->taxonomy[$isl_vid][$isl_all_tid]))) {
    $tids = implode(', ', $isls_guest);
  	watchdog('p2p', 'searching on island tids '. $tids);
    $sql = db_query("SELECT DISTINCT n.nid, n.uid, u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE n.type = 'host' AND n.status = 1 AND tn.tid IN ('%s')", $tids);
  
  // Otherwise find all active hosts
  } else {
    watchdog('p2p', 'searching all islands');
    $sql = db_query("SELECT n.nid, n.uid, u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = 'host' AND n.status = 1");
  }
  while ($data = db_fetch_object($sql)) {
    watchdog('p2p', 'found host uid '. $data->uid .' / nid '. $data->nid);
    $hosts[$data->uid] = $data->nid;
  }
  // Cycle through hosts and build an array of common interests
  $count = 0;
  foreach ($hosts AS $host_uid => $host_nid) {
    // If we're cycling through all hosts, this node_load could hurt us performance-wise.
    // Might be better to directly query for the relevant terms
    $host_node = node_load($host_nid);
    $ints_host = array();
    foreach ($host_node->taxonomy AS $term) {
      if ($term->vid == $int_vid) {
        watchdog('p2p', 'adding term tid '. $term->tid .' / name '. $term->name .' to host interests');
        $ints_host[$term->tid] = $term->name;
      }
    }
    $common_interests = array_intersect($ints_guest, $ints_host);
    $common_interests_count = count($common_interests);
    if ($common_interests_count > 0) {
      watchdog('p2p', 'adding host nid '. $host_nid .' to potential hosts');
      $matches[$host_nid] = $common_interests_count; 
    }
  }
  //drupal_set_message(print_r(($matches));
  // Sort matches by # of common interests, descending
  arsort($matches);
  // More than twenty possibilities is ridiculous
  $matches = array_slice($matches, 0, 20, TRUE);
  
  // If we found common interests, flag the host on behalf of the guest
  if (count($matches) > 0) {
    watchdog('p2p', 'got matches');
    $return = TRUE;
    if ($flag == TRUE) {
      watchdog('p2p', 'flaggin');
      $host_flag = flag_get_flag('potential_host');
      foreach ($matches AS $host_nid => $count) {
        //$host_nid = db_result();
        //drupal_set_message($host_nid);
        $host_flag->flag('flag', $host_nid, $account, TRUE);
      }
    }
  }
  return $return;
}

function person_to_person_init() {
  global $conf;
  //drupal_set_message(print_r($conf));
  $conf['vertical_tabs_forms']['guest_node_form'] = $conf['vertical_tabs_forms']['host_node_form'] = array('account' => FALSE, 'taxonomy' => FALSE);
}